<!DOCTYPE html>

<html lang="en" class="light-style layout-menu-fixed layout-compact" dir="ltr" data-theme="theme-default"
    data-assets-path="/assets/" data-template="vertical-menu-template-free">

<head>
    <meta charset="utf-8" />
    <meta name="viewport"
        content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />


    <title>Lead Managment</title>

    <meta name="description" content="" />

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/assets/img/favicon/favicon.ico" />

    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link rel="stylesheet" href="styles.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap"
        rel="stylesheet" />

    <link rel="stylesheet" href="/assets/vendor/fonts/boxicons.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Core CSS -->
    <link rel="stylesheet" href="/assets/vendor/css/core.css" class="template-customizer-core-css" />
    <link rel="stylesheet" href="/assets/vendor/css/theme-default.css" class="template-customizer-theme-css" />
    <link rel="stylesheet" href="/assets/css/demo.css" />
    <link rel="stylesheet" href="/assets/css/mail.css" />

    <!-- Vendors CSS -->
    <link rel="stylesheet" href="/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
    <link rel="stylesheet" href="/assets/vendor/libs/apex-charts/apex-charts.css" />

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <!-- Page CSS -->


    <!-- Helpers -->
    <script src="/assets/vendor/js/helpers.js"></script>
    <!--! Template customizer & Theme config files MUST be included after core stylesheets and helpers.js in the <head> section -->
    <!--? Config:  Mandatory theme config file contain global vars & default theme options, Set your preferred theme option in this file.  -->
    <script src="/assets/js/config.js"></script>
    <style>
        .input_row {
            max-width: 190px;
            background-color: #f5f5f5;
            color: #242424;
            padding: .15rem .5rem;
            min-height: 40px;
            border-radius: 4px;
            outline: none;
            border: none;
            line-height: 1.15;
            box-shadow: 0px 10px 20px -18px;
        }

        .input_row:focus {
            border-bottom: 2px solid #5b5fc7;
            border-radius: 4px 4px 2px 2px;
        }

        .input_row:hover {
            outline: 1px solid lightgrey;
        }


        .input-container2 {
            --c-text: rgb(50, 50, 80);
            --c-bg: rgb(252, 252, 252);
            --c-outline: rgb(55, 45, 190);
            display: grid;
            gap: 1ch;
            position: relative;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: black;
        }

        .input-field {
            padding: 0.5em 0.75em;
            border-radius: 0.2em;
            border: 1px solid var(--c-border, currentColor);
            color: var(--c-text);
            font-size: 1rem;
            letter-spacing: 0.1ch;
            width: 100%;
        }

        .input-container2 input {
            border: none;
            outline: 1px solid lightgrey;
            border-radius: 4px 4px 2px 2px;
        }



        .input-field:invalid {
            --c-border: rgb(230, 85, 60);
            --c-text: rgb(230, 85, 60);
            --c-outline: rgb(230, 85, 60);
        }

        .input-field:is(:disabled, :read-only) {
            --c-border: rgb(150, 150, 150);
            --c-text: rgb(170, 170, 170);
        }

        .input-field:is(:focus, :focus-visible) {

            outline-offset: 2px;
        }

        .input-label {
            --timing: 200ms ease-in;
            position: absolute;
            left: 0;
            top: 50%;
            transition: transform var(--timing),
                opacity var(--timing);
            transform: translateY(-50%);
            opacity: 0;
            color: var(--c-text);
            font-weight: 500;
        }



        .svgIcon {
            width: 16px;
        }

        .svgIcon path {
            fill: white;
        }





        .btn_cnt {
            position: relative;
        }

        /*   .stopbtn {
            width: 130px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: red;
            border: none;
            color: white;
            font-weight: 600;
            gap: 8px;
            cursor: pointer;
            box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.103);
            position: relative;
            overflow: hidden;
            transition-duration: .3s;
            position: absolute;
            right: 0;
            top: 0;
        } */

        .startbtn,
        .Btn {
            position: absolute;
            z-index: 2;
            right: 0;
            top: 0;
            width: 130px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: green;
            border: none;
            color: white;
            font-weight: 600;
            gap: 8px;
            cursor: pointer;
            box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.103);
            position: relative;
            overflow: hidden;
            transition-duration: .3s;
        }

        .data_holder {
            max-height: 50vh;
            overflow-y: scroll;
        }
    </style>
</head>

<body>
    <div class="loader_cnt">
        <div class="loader"></div>
    </div>

    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->

            {{>Sidebar}}
            <!-- / Menu -->

            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->

                {{>navBar}}
                <!-- / Navbar -->

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->

                    <div class="container-xxl flex-grow-1 container-p-y">
                        <div
                            class=" col-md-12 col-12 mt-2 bg-white p-4 rounded-top rounded-bottom d-flex justify-content-between align-items-center">

                            <div class="input-container2 col-md-6 col-12 px-0">
                                <input type="text" placeholder="What are you working on?" name="taskname" id="taskname"
                                    class="input-field w-100" autocomplete="name">
                            </div>
                            <div class="cur_time d-flex justify-content-center gap-5">
                                <div class="timer d-flex justify-content-center align-items-center" style="gap: 15px">
                                    <p class="starthour m-0">00</p>
                                    :
                                    <p class="startminute m-0">00</p>
                                    :
                                    <p class="startsecond m-0">00</p>
                                </div>

                                <div class="btn_cnt">
                                    <button class="startbtn Btn">
                                        Start
                                    </button>

                                </div>

                            </div>

                        </div>

                        {{!-- data head --}}
                        <div class="col-md-12 col-12 mt-4 p-0  ">
                            <div class="heading w-100 d-flex justify-content-between rounded-top  p-4 align-items-center p-0"
                                style="background-color: antiquewhite;">

                                <div class="total_cnt d-flex justify-content-center align-items-center"
                                    style="gap: 15px;">
                                    <h6 class="m-0">Total</h6>
                                    <input type="text" name="" value={{userId}} id="useremp_id" class="d-none">
                                    <div class="timer d-flex justify-content-center align-items-center"
                                        style="gap: 15px">
                                        <p class="hour m-0">00</p>
                                        :
                                        <p class="minute m-0">00</p>
                                        :
                                        <p class="second m-0">00</p>
                                    </div>
                                </div>
                            </div>
                            <div class="data_holder">
                                {{!-- custom data --}}

                            </div>


                        </div>



                    </div>

                    <!-- Footer -->
                    {{>footer}}
                    <!-- / Footer -->

                    <div class="content-backdrop fade"></div>
                </div>
                <!-- Content wrapper -->
            </div>
            <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>
    </div>


</body>
<script src="/scripts/customizeleadform.js"></script>
<!-- Main JS -->
<script src="/assets/js/main.js"></script>

<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
    integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
    integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js"
    integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
    crossorigin="anonymous"></script>

<script>


    async function fetchAndDisplayData() {
        try {
            const response = await fetch('/timetrackerGet');
            const data = await response.json();
            if (data.success) {
                const dataholder = document.querySelector(".data_holder");

                // Clear existing content
                dataholder.innerHTML = '';

                // Iterate over fetched data and create HTML elements
                data.data.forEach((item) => {
                    const newTaskElement = document.createElement('div');
                    newTaskElement.classList.add('inner_dets', 'p-3', 'bg-white');

                    newTaskElement.innerHTML = `
          <div class="dets d-flex justify-content-between align-items-center">
              <div class="input-container2 d-flex gap-3 align-items-center">
                  <input type="text"  placeholder="Enter your name" id="text_${item.id}" value="${item.taskName}" name="text" id="text" class="input-field input-taskName_field" autocomplete="name" readonly>
                   <i class="ri-edit-line" onclick="updateField('${item.id}')"></i>     
              </div>
              <div class="row_time">
                  <div class="timer d-flex justify-content-center align-items-center" style="gap: 15px">
                      
                <p class="workhour m-0">${item.startTime.split(':')[0]}</p>
                      :
                <p class="workminute m-0">${item.startTime.split(':')[1]}</p>
                      :
                <p class="worksecond m-0">${item.startTime.split(':')[2]}</p>
                  </div>
              </div>
          </div>
        `;
                    dataholder.appendChild(newTaskElement);
                });
            } else {
                console.log('No data found');
            }
        } catch (error) {
            console.error('Error fetching and displaying data:', error);
        }
    }
    fetchAndDisplayData();

    async function updateField(e) {
        const inputTask = document.getElementById(`text_${e}`);
        inputTask.removeAttribute('readonly')

        inputTask.focus()


        inputTask.addEventListener('blur', async function () {
            const resp = await fetch(`/timetracker/${e}`, {
                method: "PUT",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    'taskName': inputTask.value
                })
            })
            const data = await resp.json();
            if (data.success) {
                inputTask.setAttribute('readonly', '')
                fetchAndDisplayData()
            }
        })
    }





</script>
<script>
    async function showData() {

        const userId = document.getElementById('useremp_id')?.value;
        document.addEventListener('DOMContentLoaded', () => {
            const startbtn = document.querySelector('.startbtn');
            const taskhour = document.querySelector('.starthour');
            const taskminute = document.querySelector('.startminute');
            const tasksecond = document.querySelector('.startsecond');
            const resultInput = document.querySelector(".input-container2 .input-field")
            // working
            const dataholder = document.querySelector(".data_holder");
            const workhour = document.querySelector('.workhour');
            const workminute = document.querySelector('.workminute');
            const worksecond = document.querySelector('.worksecond');
            let intervalId;
            let count = 0;

            startbtn.addEventListener('click', async () => {
                const tasknameInput = document.querySelector('#taskname').value;
                if (!tasknameInput) {
                    alert('Fill the input first');
                    return;
                }

                if (startbtn.classList.contains('stopbtn')) {
                    clearInterval(intervalId);
                    startbtn.classList.remove('stopbtn');
                    startbtn.classList.add('startbtn');
                    startbtn.style.backgroundColor = 'green';
                    startbtn.textContent = 'Start';


                    const newTaskElement = document.createElement('div');
                    newTaskElement.classList.add('inner_dets', 'p-3', 'bg-white');
                    newTaskElement.innerHTML = `
                        <div class="dets d-flex justify-content-between align-items-center">
                            <div class="input-container2">
                                <input type="text" placeholder="Enter your name" value="${tasknameInput}" name="text" id="text" class="input-field" autocomplete="name" readonly>
                            </div>
                            <div class="row_time">
                                <div class="timer d-flex justify-content-center align-items-center" style="gap: 15px">
                                    
                                    <p class="workhour m-0">${taskhour.textContent}</p>
                                    :
                                    <p class="workminute m-0">${taskminute.textContent}</p>
                                    :
                                    <p class="worksecond m-0">${tasksecond.textContent}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    dataholder.appendChild(newTaskElement);


                    const timerElement = newTaskElement.querySelector('.timer');
                    console.log(timerElement)
                    if (timerElement) {
                        const wHour = timerElement.children[0].textContent;
                        const wMinute = timerElement.children[1].textContent;
                        const wSecond = timerElement.children[2].textContent;


                        // post request for store data

                        const response = await fetch('/timetracker', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                'userId': userId,
                                'taskname': tasknameInput,
                                'startTime': `${taskhour?.textContent}:${taskminute?.textContent}:${tasksecond?.textContent}`,
                                'endTime': `${wHour}:${wMinute}:${wSecond}`,
                                'totalTime': parseInt(wHour + wMinute + wSecond)

                            })
                        })
                        const responseData = await response.json();
                        console.log(responseData);
                        if (responseData.success) {
                            // Reset the timer
                            count = 0;
                            taskhour.textContent = '00';
                            taskminute.textContent = '00';
                            tasksecond.textContent = '00';
                            return;
                        }


                    }
                }

                startbtn.classList.add('stopbtn');
                startbtn.classList.remove('startbtn');
                startbtn.style.backgroundColor = 'red';
                startbtn.textContent = 'Stop';

                clearInterval(intervalId); // Clear any existing interval
                intervalId = setInterval(() => {
                    count++;
                    tasksecond.textContent = count % 60 < 10 ? `0${count % 60}` : count % 60;
                    if (count % 60 === 0) {
                        taskminute.textContent = count / 60 < 10 ? `0${count / 60}` : count / 60;
                        count = 0;
                    }
                    if (count % 3600 === 0) {
                        taskhour.textContent = count / 3600 < 10 ? `0${count / 3600}` : count / 3600;
                        count = 0;
                    }
                }, 1000);
            });
        });
    }
    showData();
</script>





</html>