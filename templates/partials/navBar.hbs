<style>
	* {
		margin: 0px;
		padding: 0px;
	}

	body {
		background: #f0f1f2;
		font: 12px "Open Sans", sans-serif;
	}

	#chat-messages {
		max-height: 400px;
		/* Set maximum height for the container */
		overflow-y: auto;
		/* Enable vertical scrolling */
	}



	/* Hide scrollbar for Chrome, Safari, and Opera */
	#chat-messages::-webkit-scrollbar {
		display: none;
	}


	.board-column-content-wrapper::-webkit-scrollbar {
		display: none;
	}

	.slide-container::-webkit-scrollbar {
		display: none;
	}

	.board-column-container {
		box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
	}

	body::-webkit-scrollbar {
		display: none;
	}

	.animate {
		text-transform: capitalize;
	}



	#view-code {
		color: #89a2b5;
		opacity: 0.7;
		font-size: 14px;
		text-transform: uppercase;
		font-weight: 700;
		text-decoration: none;
		position: absolute;
		top: 660px;
		left: 50%;
		margin-left: -50px;
		z-index: 200;
	}

	#view-code:hover {
		opacity: 1;
	}

	#chatbox {
		width: 294px;
		background: #fff;
		border-radius: 6px;
		overflow-x: hidden;
		overflow-y: scroll;
		height: 484px;
		position: absolute;
		top: 140%;
		right: 0%;
		margin-left: -155px;
	}

	#friendslist {
		position: absolute;
		top: 0;
		left: 0;
		width: 290px;
		height: 484px;
	}

	#topmenu {
		height: 52px;
		width: 290px;
		border-bottom: 1px solid #d8dfe3;
		position: relative;
	}


	#topmenu span {
		float: left;
		width: 105px;
		height: 70px;
		background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/top-menu.png) -3px -134px no-repeat;
	}

	#topmenu span.friends {
		margin-bottom: -1px;
	}

	#topmenu span.chats {
		background-position: -95px 25px;
		cursor: pointer;
	}

	#topmenu span.chats:hover {
		background-position: -95px -46px;
		cursor: pointer;
	}

	#topmenu span.history {
		background-position: -190px 24px;
		cursor: pointer;
	}

	#topmenu span.history:hover {
		background-position: -190px -47px;
		cursor: pointer;
	}

	.friend {
		height: 70px;
		border-bottom: 1px solid #e7ebee;
		position: relative;
	}

	.friend:hover {
		background: #f1f4f6;
		cursor: pointer;
	}

	.friend img {
		width: 40px;
		border-radius: 50%;
		margin: 15px;
		float: left;
	}

	.floatingImg {
		width: 40px;
		border-radius: 50%;
		position: absolute;
		top: 0;
		left: 12px;
		border: 3px solid #fff;
		height: 68px;
	}

	.friend p {
		padding: 15px 0 0 0;
		float: left;
		width: 220px;
	}

	.friend p strong {
		font-weight: 600;
		font-size: 15px;
		color: #597a96;

	}

	.friend p span {
		font-size: 13px;
		font-weight: 400;
		color: #aab8c2;
	}

	.friend .status {
		background: #26c281;
		border-radius: 50%;
		width: 9px;
		height: 9px;
		position: absolute;
		top: 31px;
		right: 17px;
	}

	.friend .status.away {
		background: #ffce54;
	}

	.friend .status.inactive {
		background: #eaeef0;
	}

	#search {
		background: #e3e9ed url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/search.png") -11px 0 no-repeat;
		height: 60px;
		width: 290px;
		position: absolute;
		bottom: 0;
		left: 0;
	}

	#searchfield {
		background: #e3e9ed;
		position: relative;
		border: none;

		font-size: 14px;
		font-family: "Open Sans", sans-serif;
		font-weight: 400px;
		color: #8198ac;
	}

	.search_div {
		height: 100%;
		float: right;

	}

	.search_div input {
		height: 100%;
		padding-left: 10px;
		float: right;
	}

	#searchfield:focus {
		outline: 0;
	}

	#chatview {
		width: 290px;
		height: 484px;
		position: absolute;
		top: 0;
		left: 0;
		display: none;
		background: #fff;
	}

	#profile {
		height: 153px;
		overflow: hidden;
		text-align: center;
		color: #fff;
	}

	.p1 #profile {
		background: #fff url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/timeline1.png") 0 0 no-repeat;
	}

	#profile .avatar {
		width: 68px;
		border: 3px solid #fff;
		margin: 23px 0 0;
		border-radius: 50%;
	}

	strong {
		text-transform: capitalize;
	}

	#profile p {
		font-weight: 600;
		font-size: 15px;
		margin: 118px 0 -1px;
		opacity: 0;
		-webkit-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-moz-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-ms-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-o-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
	}

	#profile p.animate {
		margin-top: 97px;
		opacity: 1;
		-webkit-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-moz-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-ms-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-o-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
	}

	#profile span {
		font-weight: 400;
		font-size: 11px;
	}

	.friend {
		display: flex;
		justify-content: space-between;
		width: 100%;
	}

	#chat-messages {
		opacity: 0;
		margin-top: 30px;
		width: 290px;
		height: 270px;
		overflow-y: scroll;
		overflow-x: hidden;
		padding-right: 20px;
		-webkit-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-moz-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-ms-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		-o-transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
		transition: all 200ms cubic-bezier(0.000, 0.995, 0.990, 1.000);
	}

	#chat-messages.animate {
		opacity: 1;
		margin-top: 0;
	}

	#chat-messages label {
		color: #aab8c2;
		font-weight: 600;
		font-size: 12px;
		text-align: center;
		margin: 15px 0;
		width: 290px;
		display: block;
	}

	#chat-messages div.message {
		padding: 0 0 30px 58px;
		clear: both;
		margin-bottom: 45px;
	}

	#chat-messages div.message.right {
		padding: 0 58px 30px 0;
		margin-right: -19px;
		margin-left: 19px;
	}

	#chat-messages .message img {
		float: left;
		margin-left: -38px;
		border-radius: 50%;
		width: 30px;
		margin-top: 12px;
		border-radius: 57%;
		object-fit: cover;
		width: 34px;
		height: 36px;
		margin-top: 12px;
	}

	#chat-messages div.message.right img {
		float: right;
		margin-left: 0;
		margin-right: -38px;
		border-radius: 57%;
		object-fit: cover;
		width: 34px;
		height: 36px;
		margin-top: 12px;
	}

	.message .bubble {
		background: #f0f4f7;
		font-size: 13px;
		font-weight: 600;
		padding: 12px 13px;
		border-radius: 5px 5px 5px 0px;
		color: #8495a3;
		position: relative;
		float: left;
	}

	#chat-messages div.message.right .bubble {
		float: right;
		border-radius: 5px 5px 0px 5px;
	}

	.bubble .corner {
		background: url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/bubble-corner.png") 0 0 no-repeat;
		position: absolute;
		width: 7px;
		height: 7px;
		left: -5px;
		bottom: 0;
	}

	div.message.right .corner {
		background: url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/bubble-cornerR.png") 0 0 no-repeat;
		left: auto;
		right: -5px;
	}

	.bubble span {
		color: #aab8c2;
		font-size: 9px;
		position: absolute;
		right: 0;
		width: max-content;
		bottom: -16px;
	}

	#sendmessage {
		height: 60px;
		border-top: 1px solid #e7ebee;
		position: absolute;
		bottom: 0;
		right: 0px;
		width: 290px;
		background: #fff;
		padding-bottm: 50px;
	}

	#sendmessage input {
		border
	}

	#sendmessage input {
		background: #fff;
		margin: 21px 0 0 21px;
		border: none;
		padding: 0;
		font-size: 14px;
		font-family: "Open Sans", sans-serif;
		font-weight: 400px;
		color: #aab8c2;
	}

	#sendmessage input:focus {
		outline: 0;
	}

	#sendmessage button {
		background: #fff url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/send.png") 0 -41px no-repeat;
		width: 30px;
		height: 30px;
		position: absolute;
		right: 15px;
		top: 23px;
		border: none;
	}

	#sendmessage button:hover {
		cursor: pointer;
		background-position: 0 0;
	}

	#sendmessage button:focus {
		outline: 0;
	}

	#close {
		position: absolute;
		top: 8px;
		opacity: 0.8;
		right: 10px;
		width: 20px;
		height: 20px;
		cursor: pointer;
	}

	#close:hover {
		opacity: 1;
	}

	.cx,
	.cy {
		background: #fff;
		position: absolute;
		width: 0px;
		top: 15px;
		right: 15px;
		height: 3px;
		-webkit-transition: all 250ms ease-in-out;
		-moz-transition: all 250ms ease-in-out;
		-ms-transition: all 250ms ease-in-out;
		-o-transition: all 250ms ease-in-out;
		transition: all 250ms ease-in-out;
	}

	.cx.s1,
	.cy.s1 {
		right: 0;
		width: 20px;
		-webkit-transition: all 100ms ease-out;
		-moz-transition: all 100ms ease-out;
		-ms-transition: all 100ms ease-out;
		-o-transition: all 100ms ease-out;
		transition: all 100ms ease-out;
	}

	.cy.s2 {
		-ms-transform: rotate(50deg);
		-webkit-transform: rotate(50deg);
		transform: rotate(50deg);
		-webkit-transition: all 100ms ease-out;
		-moz-transition: all 100ms ease-out;
		-ms-transition: all 100ms ease-out;
		-o-transition: all 100ms ease-out;
		transition: all 100ms ease-out;
	}

	#profile span {
		text-transform: lowercase;
	}

	.cy.s3 {
		-ms-transform: rotate(45deg);
		-webkit-transform: rotate(45deg);
		transform: rotate(45deg);
		-webkit-transition: all 100ms ease-out;
		-moz-transition: all 100ms ease-out;
		-ms-transition: all 100ms ease-out;
		-o-transition: all 100ms ease-out;
		transition: all 100ms ease-out;
	}

	.cx.s1 {
		right: 0;
		width: 20px;
		-webkit-transition: all 100ms ease-out;
		-moz-transition: all 100ms ease-out;
		-ms-transition: all 100ms ease-out;
		-o-transition: all 100ms ease-out;
		transition: all 100ms ease-out;
	}

	.cx.s2 {
		-ms-transform: rotate(140deg);
		-webkit-transform: rotate(140deg);
		transform: rotate(140deg);
		-webkit-transition: all 100ms ease-out;
		-moz-transition: all 100ms ease-out;
		-ms-transition: all 100ease-out;
		-o-transition: all 100ms ease-out;
		transition: all 100ms ease-out;
	}

	.cx.s3 {
		-ms-transform: rotate(135deg);
		-webkit-transform: rotate(135deg);
		transform: rotate(135deg);
		-webkit-transition: all 100ease-out;
		-moz-transition: all 100ms ease-out;
		-ms-transition: all 100ms ease-out;
		-o-transition: all 100ms ease-out;
		transition: all 100ms ease-out;
	}

	#chatview,
	#sendmessage {
		overflow: hidden;
		border-radius: 6px;
	}

	.friend p span {
		display: block;
		max-width: 90% !important;
		white-space: pre-wrap !important;
		text-transform: lowercase !important;
	}

	#chatbox::-webkit-scrollbar {
		display: none !important;
		;

	}

	.chatview {
		position: relative;
	}

	.emoji_container {
		position: absolute;
		bottom: 65px;
		right: 10%;
		height: 120px;
		width: 120px;
		background-color: white;
		box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
		display: none;
		z-index: 101;
	}

	.search {
		display: flex;
		align-items: center;
		justify-content: space-between;
		text-align: center;
	}

	.search__input {
		font-family: inherit;
		font-size: inherit;
		background-color: #f4f2f2;
		border: none;
		color: #646464;
		padding: 0.5rem 1rem;
		width: 100%;
		transition: all ease-in-out .5s;
		margin-right: -2rem;
	}

	.search__input:hover,
	.search__input:focus {
		box-shadow: 0 0 1em #00000013;
	}

	.search__input:focus {
		outline: none;
		background-color: #f0eeee;
	}

	.search__input::-webkit-input-placeholder {
		font-weight: 100;
		color: #ccc;
	}

	.search_input:focus+.search_button {
		background-color: #f0eeee;
	}

	.emoji-content {
		width: 100%;
		height: 70%;
		overflow-y: auto;
		overflow-x: hidden;
	}

	.emoji-content::-webkit-scrollbar {
		width: 6px;
	}

	.search {
		height: 30%;
	}

	.search input {
		height: 100%;
	}
</style>

<nav class="layout-navbar container-xxl navbar navbar-expand-xl navbar-detached align-items-center bg-navbar-theme"
	id="layout-navbar">

	<div id="chatbox" style="display: none;">
		<div id="friendslist">
			<div id="topmenu">
				<span class="friends"></span>
				<div class="search_div">
					<input type="text" id="searchfield" placeholder="Search contacts..." />
				</div>
			</div>

			<div id="friends">

				<div id="search" style="display: none;">
					<input type="text" id="searchfield" placeholder="Search contacts..." />
				</div>

			</div>

		</div>

		<div id="chatview" class="p1">
			<div class="emoji_container">
				<div class="search">
					<input type="text" class="search__input" placeholder="Type your text">
				</div>
				<div class="emoji-content">
					{{!-- dynamically emoji content --}}

				</div>
			</div>
			<div id="profile">
				<div id="close">
					<div class="cy"></div>
					<div class="cx"></div>
				</div>
				<p>Miro Badev</p>
				<span>miro@badev@gmail.com</span>
			</div>
			<div id="chat-messages">
				<!-- Messages will be displayed here -->
			</div>

			<div id="sendmessage">
				<input type="text" placeholder="Send message..." id="messageInput" />
				<i class="ri-emoji-sticker-line emojiBtn" style="font-size: 13px;"></i>
				<button id="send"></button>
			</div>

		</div>

	</div>


	<div class="layout-menu-toggle navbar-nav align-items-xl-center me-3 me-xl-0 d-xl-none">
		<a class="nav-item nav-link px-0 me-xl-4" href="javascript:void(0)">
			<i class="bx bx-menu bx-sm"></i>
		</a>
	</div>
	{{!-- --}}

	<div class="navbar-nav-right d-flex align-items-center" id="navbar-collapse">
		<!-- Search -->
		<div class="navbar-nav align-items-center">
			<div class="nav-item d-flex align-items-center">
				<i class="bx bx-search fs-4 lh-0"></i>
				<input type="text" class="form-control border-0 shadow-none ps-1 ps-sm-2" placeholder="Search..."
					aria-label="Search...">
			</div>
		</div>
		<!-- /Search -->

		<ul class="navbar-nav flex-row align-items-center ms-auto">
			<!-- Place this tag where you want the button to render. -->
			<li class="nav-item lh-1 me-3 header">
				<span> <i class="ri-chat-4-line "></i></span>
			</li>


			<!-- User -->
			<li class="nav-item navbar-dropdown dropdown-user dropdown">

				<a class="nav-link dropdown-toggle hide-arrow" href="javascript:void(0);" data-bs-toggle="dropdown">
					<div class="avatar avatar-online ">
						{{!-- <img src="../assets/img/avatars/1.png" alt="" class="w-px-40 h-auto rounded-circle"> --}}
					</div>
				</a>
				<ul class="dropdown-menu dropdown-menu-end">
					<li>
						<a class="dropdown-item" href="#">
							<div class="d-flex">
								<div class="flex-shrink-0 me-3">
									<div class="avatar avatar-online">
										<form id="imageForm" action="/upload" method="post"
											enctype="multipart/form-data">
											<label for="userImage" id="imagePreviewContainer"
												style="width: 40px;height:40px">
												<img id="imagePreview" class="d-none">
											</label>
											<input type="file" id="userImage" name="userImage" style="display: none;">
										</form>

									</div>
								</div>
								<div class="flex-grow-1" id="appendNameGroup">
									{{!-- <span class="fw-medium d-block">John Doe</span>
									<small class="text-muted">Admin</small> --}}
								</div>
							</div>
						</a>
					</li>
					<li>
						<div class="dropdown-divider"></div>
					</li>
					<li>
						<a class="dropdown-item" href="/account">
							<i class="bx bx-user me-2"></i>
							<span class="align-middle">My Profile</span>
						</a>
					</li>
					<li>
						<a class="dropdown-item" href="#">
							<i class="bx bx-cog me-2"></i>
							<span class="align-middle">Settings</span>
						</a>
					</li>
					<li>
						<a class="dropdown-item" href="#">
							<span class="d-flex align-items-center align-middle">
								<i class="flex-shrink-0 bx bx-credit-card me-2"></i>
								<span class="flex-grow-1 align-middle ms-1">Billing</span>
								<span
									class="flex-shrink-0 badge badge-center rounded-pill bg-danger w-px-20 h-px-20">4</span>
							</span>
						</a>
					</li>
					<li>
						<div class="dropdown-divider"></div>
					</li>
					<li>
						<a class="dropdown-item" href="javascript:void(0);">
							<i class="bx bx-power-off me-2"></i>
							<span class="align-middle">Log Out</span>
						</a>
					</li>
				</ul>
			</li>
			<!--/ User -->
		</ul>
	</div>
</nav>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
	async function Emoji() {
		const emoji_cnt = document.querySelector('.emoji_container')
		const emojiBtn = document.querySelector('.emojiBtn')
		const searchInput = document.querySelector('#sendmessage > input')
		var increment = true;
		emojiBtn.addEventListener('click', () => {
			if (increment) {
				emoji_cnt.style.display = 'block';
				increment = false
			}
			else {
				emoji_cnt.style.display = 'none';
				increment = true;
			}

		})
		searchInput.addEventListener('keyup', (e) => {
			if (e.key.toLowerCase() === 'enter') {
				emoji_cnt.style.display = 'none';
				increment = true;
			}
		})
		document.querySelector('#send').addEventListener('click', () => {
			emoji_cnt.style.display = 'none';
			increment = true;
		})
	}


	window.onload = async () => {
		const res = await fetch('/emoji.json')
		const data = await res.json()
		appendEmoji(data)
		filterEmoji(data)
	}

	function appendEmoji(data) {
		const emojicnt = document.querySelector('.emoji-content')
		data.forEach(el => {
			const small = document.createElement('small')
			small.classList.add('emoji')
			small.style.cursor = 'pointer'
			small.textContent = el.character
			emojicnt.appendChild(small)
			small.addEventListener('click', (e) => {
				const searchInput = document.querySelector('#sendmessage > input')
				searchInput.value += e.target.textContent
			})
		})
	}

	function filterEmoji(data) {
		const emojiInput = document.querySelector('.search__input')
		emojiInput.addEventListener('input', function (e) {
			const emojicnt = document.querySelector('.emoji-content')
			emojicnt.innerHTML = ''
			const filteredEmojis = data.filter(el => el.subGroup.includes(e.target.value.toLowerCase()))
			appendEmoji(filteredEmojis)
		})
	}
	Emoji()
</script>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Add event listener to the image
		document.getElementById("imagePreview").addEventListener("click", function () {
			// Trigger click event on file input
			document.getElementById("userImage").click();
		});

		// Add event listener to file input
		document.getElementById("userImage").addEventListener("change", function () {
			// Automatically submit the form when file is selected
			document.getElementById("imageForm").submit();
		});

		// Add event listener to form submission
		document.getElementById("imageForm").addEventListener("submit", function (event) {
			event.preventDefault(); // Prevent default form submission
			const form = event.target;
			const formData = new FormData(form);

			fetch("/upload", {
				method: "POST",
				body: formData
			})
				.then(response => {
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.json();
				})
				.then(data => {
					if (data.message === "File uploaded successfully") {
						toastr.success(data.message);
						setTimeout(function () {
							location.reload(); // Reload the page after a short delay
						}, 1000); // 1000 milliseconds = 1 second
					} else {
						toastr.error(data.message);
					}
				})
				.catch(error => {
					console.error("Error uploading file:", error);
					toastr.error("Error uploading file. Please try again later.");
				});
		});
	});
</script>


<script>
	function displayUserImage() {
		// Fetch the user details API
		fetch('/usersFetch')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(user => {
				// Get the container element where the user image will be displayed
				const avatarContainer = document.querySelector('.avatar.avatar-online');
				const imagePreviewContainer = document.getElementById('imagePreviewContainer');
				const nameGroupContainer = document.getElementById('appendNameGroup');

				// Create an <img> element for the user's image
				const img = document.createElement('img');
				img.src = '/userImage/' + user.userImage; // Assuming userImage contains the image file name
				img.alt = ''; // Provide alternative text if necessary
				img.classList.add('rounded-circle');

				// Append the <img> element to the container
				avatarContainer.appendChild(img);

				// Create an <img> element for the user's image preview
				const imgPreview = document.createElement('img');
				imgPreview.style.width = "100%"
				imgPreview.style.height = "100%"
				imgPreview.style.objectFit = "cover"
				imgPreview.src = '/userImage/' + user.userImage; // Assuming userImage contains the image file name
				imgPreview.alt = ''; // Provide alternative text if necessary
				imgPreview.classList.add('rounded-circle');

				// Append the <img> element to the preview container
				imagePreviewContainer.appendChild(imgPreview);

				// Create a <span> element for the username
				const usernameSpan = document.createElement('span');
				usernameSpan.classList.add('fw-medium', 'd-block');
				usernameSpan.textContent = user.username; // Assuming 'username' is the property in the API response for username

				// Create a <small> element for the user group
				const userGroupSmall = document.createElement('small');
				userGroupSmall.style.textTransform = "capitalize"
				userGroupSmall.classList.add('text-muted', 'capitalize');
				userGroupSmall.textContent = user.user_group; // Assuming 'userGroup' is the property in the API response for user group

				// Append the <span> and <small> elements to the container
				nameGroupContainer.appendChild(usernameSpan);
				nameGroupContainer.appendChild(userGroupSmall);
			})
			.catch(error => {
				console.error('There was a problem fetching the user details:', error);
			});
	}

	// Add an event listener to call displayUserImage function when the window loads
	window.addEventListener('load', displayUserImage);

</script>


{{!--
<script>
	//Content Loaded
	window.addEventListener("DOMContentLoaded", (e) => {
		var header = document.querySelector(".header");
		var chatRoom = document.querySelector(".chat-room");
		var typeArea = document.querySelector(".type-area");
		var btnAdd = document.querySelector(".button-add");
		var others = document.querySelector(".others");
		var emojiBox = document.querySelector(".emoji-button .emoji-box");
		var emojiButton = document.querySelector(".others .emoji-button");
		var emojis = document.querySelectorAll(".emoji-box span");
		var inputText = document.querySelector("#inputText");
		var btnSend = document.querySelector(".button-send");
		var messageArea = document.querySelector(".message.message-right");
		var chatBox2 = document.querySelector('.chat-box')
		//Header onclick event
		let flag = true;
		const chatBox = document.querySelector('.chat-box ')
		header.addEventListener('click', () => {
			if (flag) {
				chatBox2.style.display = "block"
				flag = false
			}
			else {
				chatBox2.style.display = "none"
				flag = true
			}

		})
		//Button Add onclick event
		btnAdd.addEventListener("click", (e) => {
			others.classList.add("others-show");
		});
		//Emoji onclick event
		emojiButton.addEventListener("click", (e) => {
			emojiBox.classList.add("emoji-show");
		});
		//Button Send onclick event
		btnSend.addEventListener("click", (e) => {
			var mess = inputText.value;
			var bubble = document.createElement('div');
			bubble.className += " bubble bubble-dark";
			bubble.textContent = mess;
			messageArea.appendChild(bubble);
			inputText.value = "";
		});
		for (var emoji of emojis) {
			emoji.addEventListener("click", (e) => {
				e.stopPropagation();
				emojiBox.classList.remove("emoji-show");
				others.classList.remove("others-show");
				inputText.value += e.target.textContent;
			});
		}
	})
</script> --}}


<script>
	const apiUrl = '/userNamesAndEmails';

	fetch(apiUrl)
		.then(response => {
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}
			return response.json();
		})
		.then(users => {
			appendDataToFriendsList(users);
			console.log('Updated Data:', users); // For demonstration, logs the updated data to console
		})
		.catch(error => {
			console.error('Error fetching users:', error);
		});

	function filterData(searchTerm) {
		var friendsList = document.getElementById('friends');
		friendsList.innerHTML = ''; // Clear the current list

		const apiUrl = '/userNamesAndEmails';
		fetch(apiUrl)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(users => {
				const filteredUsers = users.filter(item => {
					return item.username.toLowerCase().includes(searchTerm);
				});

				appendDataToFriendsList(filteredUsers);
			})
			.catch(error => {
				console.error('Error fetching users:', error);
			});
	}

	// get input data and value
	const searchField = document.getElementById('searchfield');
	searchField.addEventListener('input', (e) => {
		const value = e.target.value.toLowerCase();
		console.log(value)
		filterData(value)
	})
	function appendDataToFriendsList(data) {
		var friendsList = document.getElementById('friends');
		const searchField = document.getElementById('searchfield').value.toLowerCase();

		// Get the username from session
		const sessionUsername = '{{req.session.username}}';

		// Use map function to transform each object into HTML elements
		var friendElements = data.map(function (entry) {
			var friendDiv = document.createElement('div');
			friendDiv.classList.add('friend');

			var img = document.createElement('img');
			img.src = entry.userImage ? '/userImage/' + entry.userImage : 'https://s3-us-west-2.amazonaws.com/s.cdpn.io/245657/1_copy.jpg';

			var p = document.createElement('p');
			var strong = document.createElement('strong');
			var span = document.createElement('span');

			if (entry.username === sessionUsername) {
				strong.textContent = 'Me';
				img.src = '{{req.session.userImage}}'; // Assuming user image is stored in session
			} else {
				strong.textContent = entry.username;
				span.textContent = entry.email;
				span.style.textTransform = "lowercase"
				// Display email for other users
			}

			p.appendChild(strong);
			p.appendChild(span);

			var statusDiv = document.createElement('div');
			statusDiv.classList.add('status');
			statusDiv.classList.add('available'); // Assuming all friends are available

			friendDiv.appendChild(img);
			friendDiv.appendChild(p);
			friendDiv.appendChild(statusDiv);

			return friendDiv;
		});

		// Append the HTML elements to the friends list
		friendElements.forEach(function (friendElement) {
			friendsList.appendChild(friendElement);
		});
	}

	// Toggle chatbox visibility
	const headerBtn = document.querySelector('.header');
	const chatbox = document.querySelector('#chatbox');
	var flag = true;
	headerBtn.addEventListener('click', () => {
		if (flag) {
			chatbox.style.display = "block";
			flag = false;
		}
		else {
			chatbox.style.display = "none";
			flag = true;
		}
	});
</script>
<script>
	function fetchMessages(toId) {
		// Perform XMLHttpRequest
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					// Handle successful response
					var messages = JSON.parse(xhr.responseText);
					displayMessages(messages);
					console.log('Fetched messages:', messages);
				} else {
					// Handle error
					console.error('Error fetching messages:', xhr.status);
				}
			}
		};
		// Open and send request
		xhr.open('GET', `/messages/${toId}`, true);
		xhr.send();
	}
	// Function to periodically fetch messages
	function startFetching(toId) {
		fetchMessages(toId);
		setInterval(function () {
			fetchMessages(toId);
		}, 1000); // Fetch messages every 5 seconds (adjust as needed)
	}

	async function displayMessages(messages) {
		var chatMessages = document.getElementById('chat-messages');
		var existingMessages = chatMessages.querySelectorAll('.message');

		try {
			// Fetch session email from backend
			const sessionDataResponse = await fetch('/session-email');
			if (!sessionDataResponse.ok) {
				throw new Error('Failed to fetch session data');
			}
			const sessionData = await sessionDataResponse.json();
			const sessionEmail = sessionData.email;

			// Fetch user image for toId
			const toIdUserResponse = await fetch(`/user/${toId}`);
			if (!toIdUserResponse.ok) {
				throw new Error('Failed to fetch user data');
			}
			const toIdUserData = await toIdUserResponse.json();
			const toIdUserImage = toIdUserData.userImage;

			// Remove existing messages without timestamp attribute
			existingMessages.forEach(existingMessage => {
				if (!existingMessage.hasAttribute('data-timestamp')) {
					existingMessage.remove();
				}
			});

			messages.forEach(message => {
				// Check if the message is already displayed
				var isNewMessage = true;
				existingMessages.forEach(existingMessage => {
					if (existingMessage.getAttribute('data-timestamp') === message.createdAt) {
						isNewMessage = false;
					}
				});

				if (isNewMessage) {
					var messageDiv = document.createElement('div');
					messageDiv.classList.add('message');

					// Check if the message is from the current user
					if (message.fromId === sessionEmail) {
						messageDiv.classList.add('right'); // Display on the right side
					} else {
						messageDiv.classList.add('left'); // Display on the left side
					}

					var img = document.createElement('img');
					if (message.fromId === sessionEmail) {
						img.src = `/userImage/${sessionData.userImage}`;
					} else {
						img.src = `/userImage/${toIdUserImage}`;
					}

					var bubbleDiv = document.createElement('div');
					bubbleDiv.classList.add('bubble');
					bubbleDiv.textContent = message.message;

					var idinputDiv = document.createElement('input')
					idinputDiv.value = message.id;
					idinputDiv.classList.add("messageId")
					idinputDiv.type = 'hidden'

					var cornerDiv = document.createElement('div');
					cornerDiv.classList.add('corner');

					var span = document.createElement('span');
					// Calculate time difference
					var timeDiff = new Date() - new Date(message.createdAt);
					var seconds = Math.floor(timeDiff / 1000);
					var minutes = Math.floor(seconds / 60);
					var hours = Math.floor(minutes / 60);

					if (seconds < 60) {
						span.textContent = 'Just now';
					} else if (minutes < 60) {
						span.textContent = minutes + ' minutes ago';
					} else if (hours < 24) {
						span.textContent = hours + ' hours ago';
					} else if (hours >= 24 && hours < 48) {
						span.textContent = 'Yesterday';
					} else {
						// Display the date if the message was sent earlier than yesterday
						var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
						span.textContent = new Date(message.createdAt).toLocaleDateString(undefined, options);
					}

					bubbleDiv.appendChild(cornerDiv);
					bubbleDiv.appendChild(span);
					cornerDiv.appendChild(idinputDiv);

					messageDiv.appendChild(img);
					messageDiv.appendChild(bubbleDiv);

					messageDiv.setAttribute('data-timestamp', message.createdAt); // Set timestamp attribute

					chatMessages.appendChild(messageDiv);
				}
			});

			// Scroll to the bottom of the chat messages container
			chatMessages.scrollTop = chatMessages.scrollHeight;
		} catch (error) {
			console.error('Error fetching data:', error);
		}
	}

	// Define variables outside the click event handler
	var toId = "";
	var toName = "";

	// When a friend is clicked
	$("#friends").on("click", ".friend", function () {
		var name = $(this).find("p strong").html();
		var email = $(this).find("p span").html();
		$("#profile p").html(name);
		$("#profile span").html(email);

		toId = email;

		// Fetch messages between the two users
		startFetching(toId);

		// Handle the chatbox animation
		var childOffset = $(this).offset();
		var parentOffset = $(this).parent().parent().offset();
		var childTop = childOffset.top - parentOffset.top;
		var clone = $(this).find('img').eq(0).clone();
		var top = childTop + 12 + "px";

		$(clone).css({ 'top': top }).addClass("floatingImg").appendTo("#chatbox");

		setTimeout(function () { $("#profile p").addClass("animate"); $("#profile").addClass("animate"); }, 100);
		setTimeout(function () {
			$("#chat-messages").addClass("animate");
			$('.cx, .cy').addClass('s1');
			setTimeout(function () { $('.cx, .cy').addClass('s2'); }, 100);
			setTimeout(function () { $('.cx, .cy').addClass('s3'); }, 200);
		}, 150);

		$('.floatingImg').animate({
			'width': "68px",
			'left': '108px',
			'top': '20px'
		}, 200);

		// Store recipient's email and name in variables
		toName = name;

		// Update recipient's email and name when sending a message
		$("#send").data("toId", toId);
		$("#send").data("toName", toName);

		$(".message").not(".right").find("img").attr("src", $(clone).attr("src"));
		$('#friendslist').fadeOut();
		$('#chatview').fadeIn();
	});

	// Attach event listener for sending a message
	document.getElementById('send').addEventListener('click', function () {
		var messageInput = document.getElementById('sendmessage').querySelector('input[type="text"]');
		var messageText = messageInput.value.trim();
		var toId = $("#send").data("toId");
		var toName = $("#send").data("toName");

		if (messageText !== '') {
			sendMessage(messageText, toId, toName);
			messageInput.value = '';
		}
	});

	$('#close').unbind("click").click(function () {
		$("#chat-messages, #profile, #profile p").removeClass("animate");
		$('.cx, .cy').removeClass("s1 s2 s3");
		$('.floatingImg').animate({
			'width': "40px",
			'top': top,
			'left': '12px'
		}, 200, function () { $('.floatingImg').remove() });

		setTimeout(function () {
			$('#chatview').fadeOut();
			$('#friendslist').fadeIn();
		}, 50);
	});

	// Function to send a message
	function sendMessage(messageText, toId, toName) {
		var chatMessages = document.getElementById('chat-messages');

		// Fetch session data
		fetch('/session-email')
			.then(response => {
				if (!response.ok) {
					throw new Error('Failed to fetch session data');
				}
				return response.json();
			})
			.then(data => {
				// Extract session data
				const sessionImage = data.userImage;
				// Create a new message element
				var messageDiv = document.createElement('div');
				messageDiv.classList.add('message');
				messageDiv.classList.add('right');

				// Create image element for the user's avatar
				var img = document.createElement('img');
				img.src = '/userImage/' + sessionImage; // Assuming sessionImage contains the filename

				// Create div for the message bubble
				var bubbleDiv = document.createElement('div');
				bubbleDiv.classList.add('bubble');

				// Create paragraph element for the message text
				var p = document.createElement('p');
				p.textContent = messageText;

				// Create div for the message corner
				var cornerDiv = document.createElement('div');
				cornerDiv.classList.add('corner');

				// Create span element for the timestamp
				var span = document.createElement('span');
				span.textContent = 'Just now';

				// Append elements to the message bubble
				bubbleDiv.appendChild(p);
				bubbleDiv.appendChild(cornerDiv);
				bubbleDiv.appendChild(span);

				// Append elements to the message div
				messageDiv.appendChild(img);
				messageDiv.appendChild(bubbleDiv);

				// Append the new message to the chat messages container
				chatMessages.appendChild(messageDiv);

				// Scroll to the bottom of the chat messages container
				chatMessages.scrollTop = chatMessages.scrollHeight;

				// Send message data to the server
				fetch('/send', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						toId: toId,
						toName: toName,
						message: messageText
					})
				})
					.then(response => {
						if (!response.ok) {
							throw new Error('Network response was not ok');
						}
						return response.json();
					})
					.then(data => {
						console.log('Message sent:', data);
					})
					.catch(error => {
						console.error('Error sending message:', error);
					});
			})
			.catch(error => {
				console.error('Error fetching session data:', error);
			});
	}


</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		// Get reference to the input field
		var messageInput = document.getElementById('messageInput');

		// Add event listener for "keypress" event
		messageInput.addEventListener('keypress', function (event) {
			// Check if Enter key is pressed
			if (event.key === 'Enter') {
				// Prevent default behavior (form submission)
				event.preventDefault();
				// Get message text from input field
				var messageText = messageInput.value.trim();
				// Check if message is not empty
				if (messageText !== '') {
					// Call sendMessage function with message text
					sendMessage(messageText, toId, toName);
					// Clear input field after sending message
					messageInput.value = '';
				}
			}
		});
	});

</script>

<!-- Include Socket.IO client library -->
<script src="/socket.io/socket.io.js"></script>

<script src="/scripts/client.js"></script>